(
loot_tables: [
    // balance the loot tables against each other (higher= more common= smaller price)
    // the fact that loot tables have an own probability not accessible outside of the lottery call doesn't help here
    (4,"common.loot_tables.wild_animal"),
    (1,"common.loot_tables.armor.cloth"),
    (0.1,"common.loot_tables.cave_large"),
    (0.1,"common.loot_tables.consumables"),
    // loot_table_crafting is a rare roll on crate/mud sprite looting
    (0.005,"common.loot_tables.cultists"),
    (1,"common.loot_tables.fish"),
    (0.1,"common.loot_tables.humanoids"),
    (1,"common.loot_tables.maneater"),
    (0.0001,"common.loot_tables.mindflayer"),
    (0.001,"common.loot_tables.miniboss"),
    // loot_table_rocks is dropped by rock monsters, but is also the only source of stones to econsim until cave_scatter information is turned into a loot table
    (1,"common.loot_tables.fallback"),
    (0.04,"common.loot_tables.saurok"),
    (0.05,"common.loot_tables.villager"),
    // we probably want to include all the scattered scatter information
    //(0.5,"common.cave_scatter"),
], 
// this is the amount of that good the most common item represents
// so basically this table balances the goods against each other (higher=less valuable)
good_scaling: [
    (Potions, 0.5), // common.items.consumable.potion_minor
    (Food, 3.0), // common.items.food.mushroom
    (Coin, 1.0), // common.items.utility.coins
    (Armor, 0.3), // common.items.armor.misc.pants.worker_blue
    (Tools, 1.0), // common.items.weapons.staff.starter_staff
    (Ingredients, 5.0), // common.items.crafting_ing.leather_scraps
])
